{% extends 'admin.html.twig' %}

{% block title %}Ajouter un nouvel examen
{% endblock %}


{% block stylesheets %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.0.0/dist/css/tom-select.css" rel="stylesheet">

{% endblock %}


{% block body %}
	<h1>Ajouter un examen</h1>

{{ form_start(form) }}

<div class="container mt-5">
    <div class="row mb-3">
        <div class="col">
            {{ form_row(form.discipline) }}
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            {{ form_row(form.start) }}
        </div>
        <div class="col">
            {{ form_row(form.duration) }}
        </div>
        <div class="col">
            {{ form_row(form.teacher) }}
        </div>
    </div>

	    <div class="row mb-3">
        <div class="col">
            {{ form_row(form.room) }}
        </div>
        <div class="col">
            {{ form_row(form.coefficient) }}
        </div>
        <div class="col">
            {{ form_row(form.max_notation) }}
        </div>
    </div>

	    <div class="row mb-3">
        <div class="col">
            {{ form_row(form.program) }}
        </div>
        <div class="col">
            {{ form_row(form.lesson) }}
        </div>
    </div>


    <div class="row mb-3">
        <div class="col">
            <label for="{{ form.studentswitch.vars.id }}">Sélectionner le ou les élèves concerné(s)</label>
        </div>
    </div>
    
    <div class="row mb-3">
        <div class="col">
            <div class="form-check form-switch">
            {% if app.request.attributes.get('_route') == 'agenda_edit_event' %}
                {{ form_widget(form.studentswitch, {'attr': {'checked': event.students is not empty}}) }}
            {% else %}
                {{ form_widget(form.studentswitch) }}
            {% endif %}
            {{ form_label(form.studentswitch) }}
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            {{ form_row(form.studentClasses) }}
            {{ form_row(form.students) }}
        </div>
    </div>

    {% if form.comment is defined %}
        <div class="row mb-3">
            <div class="col">
                {{ form_row(form.comment) }}
            </div>
        </div>
    {% endif %}

    {% if form.objective is defined %}
        <div class="row mb-3">
            <div class="col">
                {{ form_row(form.objective) }}
            </div>
        </div>
    {% endif %}

    <div class="row mb-4">
        <div class="col">
            <button class="btn btn-primary">{{ button_label|default('Sauvegarder') }}</button>
	        <a href="{{ path('app_calendar_home') }}" class="btn primary-custom-button float-end">Retour à l'agenda</a>
        </div>
    </div>
</div>

{{ form_row(form.reservedRooms, {'attr': {'style': 'display: none;'}}) }}


{{ form_end(form) }}


{% endblock %}


{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.0.0/dist/js/tom-select.complete.min.js"></script>
<script src = "https://cdn.jsdelivr.net/npm/flatpickr"> </script> 
<script src = "https://npmcdn.com/flatpickr/dist/l10n/fr.js" > </script> 
<script>
	$(document).ready(function() {
		var evaluations_studentClasseselect = new TomSelect('#evaluations_studentClasses', {
			hideSelected: true,
			maxOptions: 10,
			plugins: {
				remove_button: {
					title: 'Supprimer la classe'
				}
			}
		});
		var evaluations_studentsSelect = new TomSelect('#evaluations_students', {
			hideSelected: true,
			maxOptions: 60,
			plugins: {
				remove_button: {
					title: 'Supprimer l\'étudiant(e)'
				}
			}
		});

		 // Sélectionnez tous les éléments select[multiple]
		var allSelects = document.querySelectorAll('select[multiple]');

		// Filtrez les éléments déjà utilisés par les deux premiers TomSelect
		var unusedSelects = Array.from(allSelects).filter(function(select) {
			return select.id !== 'evaluations_studentClasses' && select.id !== 'evaluations_students';
		});

		// Initialisez un TomSelect pour les éléments restants
		unusedSelects.forEach(function(select) {
			new TomSelect(select, {
				hideSelected: true,
				maxOptions: 20,
				plugins: {
					remove_button: {
						title: 'Retirer'
					}
				}
			});
		});
		
		$('#evaluations_students').parent().hide();
		$('#evaluations_studentClasses').parent().show();

		// Écouter les changements sur le switch
		$('#evaluations_studentswitch').on('change', function() {
			if ($(this).is(':checked')) {
			// Si le switch est coché, masquer le premier TomSelect et afficher le deuxième
			$('#evaluations_studentClasses').parent().hide();
			$('#evaluations_students').parent().show();

			// Clear la sélection du premier TomSelect
			evaluations_studentClasseselect.clear();
			} else {
			// Si le switch est décoché, masquer le deuxième TomSelect et afficher le premier
			$('#evaluations_students').parent().hide();
			$('#evaluations_studentClasses').parent().show();

			// Clear la sélection du deuxième TomSelect
			evaluations_studentsSelect.clear();
			}
		});

		var zoomLinkSelect = $('#evaluations_zoom_link');
		var roomSwitchselect = $('#evaluations_room');
		var roomSwitchInput = $('#evaluations_zoomswitch');

		// Masquer le zoom au chargement de la page
		zoomLinkSelect.hide();
		$('.label-zoom').hide();

		// Afficher les salles par défaut
		roomSwitchselect.show();
		$('#row-materials').show();
		$('.label-room').show();
		$('.label-materials').show();
		// Écouter les changements sur le champ switch room

		roomSwitchInput.on('change', function() {
			if ($(this).is(':checked')) {
				$('.label-room').hide();
				$('.label-materials').hide();
				$('#row-materials').hide();
				roomSwitchselect.hide();

				zoomLinkSelect.show();
				$('.label-zoom').show();

				// Vider le champ de la classe et réinitialiser sa valeur
				roomSwitchselect.val('').trigger('change');
				$('#event_form_materials .form-check-input').prop('checked', false).trigger('change');

			} else {
				zoomLinkSelect.hide();
				$('.label-zoom').hide();

				$('.label-room').show();
				roomSwitchselect.show();
				$('#row-materials').show();
				$('.label-materials').show();

				// Vider le champ des élèves et réinitialiser sa valeur
				zoomLinkSelect.val(null).trigger('change');
			}
		});

				function roundUpHour(date) {
			var hour = date.getHours();
			
			// Arrondir à l'heure supérieure
			if (date.getMinutes() > 0) {
				hour += 1;
			}

			// Retourner l'heure arrondie
			return hour;
		}

		function roundUpDateAndHour() {
			var currentDate = new Date();
			var roundedHour = roundUpHour(currentDate);
			
			// Réinitialiser les minutes et les secondes à zéro
			currentDate.setMinutes(0);
			currentDate.setSeconds(0);

			// Si l'heure arrondie dépasse minuit, passer au jour suivant
			if (roundedHour >= 24) {
				currentDate.setDate(currentDate.getDate() + 1);
				roundedHour = 0; // Réinitialiser l'heure à zéro
			}

			// Définir l'heure arrondie sur la date actuelle
			currentDate.setHours(roundedHour);

			// Retourner la date et l'heure arrondies
			return currentDate;
		}
		function initDatePicker(selector, options) {
			var roundedDate = roundUpDateAndHour();
			var flatpickrOptions = {
				defaultDate: roundedDate,
				enableTime: options.enableTime || false,
				time_24hr: true, // Utiliser le format 24 heures
				monthSelectorType: 'static',
				disableMobile: true,
				altInput: true,
				altFormat: "j M Y, H:i",
				dateFormat: "Y-m-d H:i:s",

				
				...options
			};

			flatpickr(selector, flatpickrOptions);
		}

		// Utilisation du DatePicker avec des options personnalisées
		initDatePicker('.datetimepickr', {
			enableTime: true,
			allowInput: true,
			nextArrow: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--! Font Awesome Pro 6.1.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M96 480c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L242.8 256L73.38 86.63c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25l-192 192C112.4 476.9 104.2 480 96 480z"/></svg>`,
			prevArrow: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--! Font Awesome Pro 6.1.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M224 480c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25l192-192c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25L77.25 256l169.4 169.4c12.5 12.5 12.5 32.75 0 45.25C240.4 476.9 232.2 480 224 480z"/></svg>`,
			locale: {
				firstDayOfWeek: 1,
				weekdays: {
					shorthand: ["dim", "lun", "mar", "mer", "jeu", "ven", "sam"],
					longhand: [
						"dimanche",
						"lundi",
						"mardi",
						"mercredi",
						"jeudi",
						"vendredi",
						"samedi",
					],
				},
				months: {
					shorthand: [
						"janv",
						"févr",
						"mars",
						"avr",
						"mai",
						"juin",
						"juil",
						"août",
						"sept",
						"oct",
						"nov",
						"déc",
					],
					longhand: [
						"Janvier",
						"Février",
						"Mars",
						"Avril",
						"Mai",
						"Juin",
						"Juillet",
						"Août",
						"Septembre",
						"Octobre",
						"Novembre",
						"Décembre",
					],
				},
				ordinal: (nth) => {
					if (nth > 1) return "";
					return "er";
				},
				rangeSeparator: " au ",
				weekAbbreviation: "Sem",
				scrollTitle: "Défiler pour augmenter la valeur",
				toggleTitle: "Cliquer pour basculer",
			}, // Supprimez la virgule ici
			onDayCreate: function(_, _, _, dayElem) {
				if (dayElem.dateObj.getDay() === 0 || dayElem.dateObj.getDay() === 6) {
					dayElem.className += ' weekend-days';
				}
			}
		});

		// Vous pouvez également créer une fonction pour le DateAndTimePicker si nécessaire
		function DateAndTimePicker(selector) {
			initDatePicker(selector, {
				enableTime: true,
			});
		}


		var materialsCheckboxes = document.querySelectorAll('.materials-checkboxes input[type="checkbox"]');
		var roomSelect = document.querySelector('.room-select');
		var startField = $('#evaluations_start');
		var durationField = $('#evaluations_duration');
		// Champ zoomlink

		// Écouter l'événement 'change' sur les champs de matériel et de durée
		materialsCheckboxes.forEach(function(checkbox) {
			checkbox.addEventListener('change', updateRooms);
		});

		durationField.on('input', updateRooms);


		// Fonction pour mettre à jour les salles en fonction des matériaux sélectionnés, de l'heure et de la durée
		function updateRooms() {
			var selectedMaterials = Array.from(materialsCheckboxes).filter(function(checkbox) {
				return checkbox.checked;
			}).map(function(checkbox) {
				return checkbox.value;
			});

			var startValue = startField.val();
			var durationValue = durationField.val();
			// Récupérer la valeur du champ zoomlink

			// Construire l'URL de l'API avec les paramètres appropriés
			var apiUrl = '/agenda/cours/api/rooms';
			apiUrl += '?materials=' + selectedMaterials.join(',');
			apiUrl += '&start=' + startValue;
			apiUrl += '&duration=' + durationValue;
			// Ajouter la valeur du champ zoomlink

			// Fetch des salles en fonction des équipements sélectionnés, de l'heure et de la durée
			fetch(apiUrl).then(function(response) {
				return response.json();
			}).then(function(rooms) { // Mise à jour des options de sélection de la salle
				while (roomSelect.firstChild) {
					roomSelect.removeChild(roomSelect.firstChild);
				}

				rooms.forEach(function(room) {
					var option = document.createElement('option');
					option.value = room.id;
					option.textContent = room.name;
					roomSelect.appendChild(option);
				});
			}).catch(function(error) {
				console.log(error);
			});
		}

		// Appeler la fonction pour mettre à jour les salles initialement
		updateRooms();

		// Écouteur d'événement pour le champ de l'heure de début
		startField.change(updateRooms);
		$('#evaluations_zoomswitch').on('change', updateRooms); // Écouteur sur le champ zoomswitch

	}); 
    </script>
{% endblock %}
